$ ->
  # 追加したフィールドに番号をつけ、日付フィールドがあればデートピッカーを付与する
  $(document).on "nested:fieldAdded", (event) ->
    field = event.field
    dateField = field.find('.inputCalendars')
    dateField.setCalendar()
    j = 0
    field.siblings().each (i) ->
      if $(@).find("input[id$=_destroy]").val() is "false"
        $(@).find('.no').text(j)
        j++
    field.find('.no').text(j)
    
  # フィールドを削除した時に番号を振り直す
  # 最初のフィールドを消した場合、次の最初のフィールドのラベルを表示させる
  $(document).on "nested:fieldRemoved", (event) ->
    field = event.field
    j = 0
    field.siblings().each (i) ->
      if $(@).find("input[id$=_destroy]").val() is "false"
        $(@).find('.hide').removeClass('hide') if j is 0
        $(@).find('.no').text(j)
        j++
    field.find('.no').text(j)


  $("#receivable_recording_institution_id").change ->
    selectVal = $("#receivable_recording_institution_id").val();
    if selectVal is window.RecordingInstitution.DENTE
      $('.sitehide').css('visibility', 'visible')
    else
      $('.sitehide').css('visibility', 'hidden')

  $("#receivable_issue_money").change ->
    kingaku = $("#receivable_issue_money").val();
    $("#receivable_residual_money").val(kingaku);

  $('.inputCalendars').setCalendar()

# FIXME: bootstrapのtooltipが有効になったら、positionの記述をbootstrapに合わせる
  $('[data-toggle="tooltip"]').tooltip({
    position: {
      my: 'center bottom', at: 'left top', collision: 'none'
    }
  })

  $('[data-toggle="tooltip"]').change ->
    $(this).attr("title", $(this).val())

  # 請求先による補完
  $("#receivable_trader_id").on 
    'change': -> 
      return false unless trader = parseInt $("#receivable_trader_id").val()
      $.getJSON(
        "/traders/#{trader}.json"
      ).done( (data) ->
        $.each data, (k,v) -> 
          if k.match "_name"
            assigner_list()[k].text v
          else
            assigner_list()[k].val v
      )

  # 発生区分による債務者、譲渡人の切り替え
  assigner_list = ()->
    recievable_type = 
    if $('#receivable_accrual_type_3').parent().attr("aria-checked") is 'true' then "assignor" else "debtor"
    list =
      # FIXME: 起点を付けてクラスで回す
      name: $("#receivable_#{recievable_type}_trader_name1")  
      kana: $("#receivable_#{recievable_type}_trader_name")  
      bank_code: $("#receivable_#{recievable_type}_bank_code")  
      bank_name:$("#recievable_#{recievable_type}_bank_name")  
      branch_code:$("#receivable_#{recievable_type}_branch_code")  
      branch_name:$("#receivable_#{recievable_type}_branch_name")  
      account_type: $("receivable_#{recievable_type}_account_type")  
      account_number: $("#receivable_#{recievable_type}_account_number")  
      user_client_code: $("#receivable_#{recievable_type}_user_number")

  # サイト区分変更時
  $('input').on 'ifChecked', (event) ->
    setPaymentDueDate()
  # 発生日付、サイト区分日付入力時
  $('#receivable_occurred_on, #after_n_months, #m_date, #after_s_days').blur ->
    setPaymentDueDate()

setPaymentDueDate = ->
  #支払期日をクリアする
  $("#receivable_due_become_on").val('')
  site_division = parseInt($("input[name='receivable[site_division]']:checked").val())

  # サイト区分mヶ月n日
  if site_division is 1
    input_month = $('#after_n_months').val()
    input_date = $('#m_date').val()
    # 発生日付
    occurrence_date = $('#receivable_occurred_on').val()

    if occurrence_date and checkInputMonthDate(input_month, input_date)
      # 発生日付にmヶ月後を加算、n日を設定
      occurrence_date = new Date(occurrence_date)
      occurrence_date.setMonth(occurrence_date.getMonth() + parseInt(input_month))

      out_year = occurrence_date.getFullYear()
      out_month = ("0" + (occurrence_date.getMonth() + 1)).slice(-2)
      # n日に99が設定されていたら末尾
      input_date = parseInt(input_date)
      if input_date is 99
        out_date = ("0" + new Date(out_year, out_month, 0).getDate()).slice(-2)
      else
        occurrence_date.setDate(input_date)
        out_date = ("0" + occurrence_date.getDate()).slice(-2)

      # 日付を支払期日に設定
      $("#receivable_due_become_on").val(out_year + "-" + out_month + "-" + out_date)
  # サイト区分s日
  else if site_division is 2
    input_days = $('#after_s_days').val()
    # 発生日付
    occurrence_date = $('#receivable_occurred_on').val()

    if occurrence_date and checkInputDays(input_days)
      # 発生日付にn日後を加算
      occurrence_date = new Date(occurrence_date)
      occurrence_date.setDate(occurrence_date.getDate() + parseInt(input_days))

      out_year = occurrence_date.getFullYear()
      out_month = ("0" + (occurrence_date.getMonth() + 1)).slice(-2)
      out_date = ("0" + occurrence_date.getDate()).slice(-2)

      # 日付を支払期日に設定
      $("#receivable_due_become_on").val(out_year + "-" + out_month + "-" + out_date)

# mヶ月n日日付チェック
checkInputMonthDate = (month, date) ->
  if /\d+\.\d+/.test(month) or /\d+\.\d+/.test(date)
    return false
  month = parseInt(month)
  date = parseInt(date)
  if !isFinite(month) or !isFinite(date)
    return false
  if (month < 0) or (month > 12)
   return false
  if (date isnt 99) and (date < 1 or date > 31)
   return false
  return true

# s日後日付チェック
checkInputDays = (days) ->
  if /\d+\.\d+/.test(days)
    return false
  days = parseInt(days)
  if !isFinite(days)
    return false
  if 0 <= days <= 999
   return true
  return false
